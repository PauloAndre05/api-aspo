// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agendamento {
  id               String   @id @default(uuid())
  nome             String
  dataAgenda       String
  servico          Servico? @relation(fields: [servicoId], references: [id])
  servicoId        String
  postoAtendimento Posto?   @relation(fields: [postoId], references: [id])
  postoId          String
  telefone         String
  email            String
  bi               String?
  comprovativo     String   @unique
  horaId           String
  horario          Horario  @relation(fields: [horaId], references: [id])
  createdAt        DateTime @default(now())

  @@map("agendamentos")
}

model Servico {
  id          String        @id @default(uuid())
  nome        String
  descricao   String
  createdAt   DateTime      @default(now())
  Agendamento Agendamento[]
  Cancelado   Cancelado[]
  Confirmado  Confirmado[]

  @@map("servicos")
}

model Posto {
  id           String        @id @default(uuid())
  nome         String
  local        String
  cordenadas   String
  limiteDiario Int
  Agendamento  Agendamento[]
  Users        Users[]
  Cancelado    Cancelado[]
  Confirmado   Confirmado[]

  @@map("postos")
}

model UserAdminGeral {
  id    String @id @default(uuid())
  nome  String
  email String @unique
  senha String
}

model Users {
  id      String @id @default(uuid())
  nome    String
  email   String @unique
  senha   String
  posto   Posto? @relation(fields: [postoId], references: [id])
  postoId String
}

model Horario {
  id          String        @id @default(uuid())
  hora        String
  Agendamento Agendamento[]
  Cancelado   Cancelado[]
  Confirmado  Confirmado[]
}

model newslettrs {
  id       String @id @default(uuid())
  email    String
  nome     String
  mensagem String
}

model Cancelado {
  id               String @id 
  nome             String
  dataAgenda       String
  servico          Servico? @relation(fields: [servicoId], references: [id])
  servicoId        String
  postoAtendimento Posto?   @relation(fields: [postoId], references: [id])
  postoId          String
  telefone         String
  email            String
  bi               String?
  comprovativo     String   @unique
  horaId           String
  horario          Horario  @relation(fields: [horaId], references: [id])
  createdAt        DateTime @default(now())
}

model Confirmado {
  id               String   @id @default(uuid())
  nome             String
  dataAgenda       String
  servico          Servico? @relation(fields: [servicoId], references: [id])
  servicoId        String
  postoAtendimento Posto?   @relation(fields: [postoId], references: [id])
  postoId          String
  telefone         String
  email            String
  bi               String?
  comprovativo     String   @unique
  horaId           String
  horario          Horario  @relation(fields: [horaId], references: [id])
  createdAt        DateTime @default(now())
}
